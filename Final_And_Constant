Final and Constant keyword:
If you never intend to change a variable, use final or const,
 either instead of var or in addition to a type. A final variable
  can be set only once; a const variable is a compile-time constant.
   (Const variables are implicitly final.)

   Note: A instance variable can be final but not constant.

   Here’s an example of creating and setting a final variable:

final name = 'Bob'; // Without a type annotation
final String nickname = 'Bobby';

   You can’t change the value of a final variable:

name = 'Alice'; // Error: a final variable can only be set once.

*************************const variable***********************
Use const for variables that you want to be compile-time constants.
 If the const variable is at the class level, mark it static const.
  Where you declare the variable, set the value to a compile-time
   constant such as a number or string literal, a const variable, 
   or the result of an arithmetic operation on constant numbers:

const bar = 1000000; // Unit of pressure (dynes/cm2)
const double atm = 1.01325 * bar; // Standard atmosphere


The const keyword isn’t just for declaring constant variables. 
You can also use it to create constant values, as well as to 
declare constructors that create constant values. Any variable 
can have a constant value.

var foo = const [];
final bar = const [];
const baz = []; // Equivalent to `const []`

Although a final object cannot be modified, its fields can be changed.
 In comparison, a const object and its fields cannot be changed: they’re immutable.
